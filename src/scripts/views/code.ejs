 <!-- HTML generated using hilite.me --><div class="code-container" style="overflow:auto;width:auto;border-width:.1em .1em .1em .8em;"><table><tr><td><pre style="margin: 0; line-height: 125%" class="line-numbers">
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194</pre></td><td><pre style="margin: 0; line-height: 125%" class="code"><span style="color: #75715e">## Original code taken from TSP example for JuMP.jl</span>
<span style="color: #66d9ef">module</span> <span style="color: #f8f8f2">TSPSolver</span>

<span style="color: #75715e">#############################################################################</span>
<span style="color: #75715e"># JuMP</span>
<span style="color: #75715e"># An algebraic modelling langauge for Julia</span>
<span style="color: #75715e"># See http://github.com/JuliaOpt/JuMP.jl</span>
<span style="color: #75715e">#############################################################################</span>
<span style="color: #75715e"># tsp.jl</span>
<span style="color: #75715e">#</span>
<span style="color: #75715e"># Solves the travelling salesman problem using integer programming and </span>
<span style="color: #75715e"># lazy generation of the subtour elimination constraints.</span>
<span style="color: #75715e">#############################################################################</span>

<span style="color: #66d9ef">using</span> <span style="color: #f8f8f2">JuMP</span>
<span style="color: #66d9ef">using</span> <span style="color: #f8f8f2">GLPKMathProgInterface</span>
<span style="color: #75715e"># using CPLEX</span>

<span style="color: #75715e"># extractTour</span>
<span style="color: #75715e"># Given a n-by-n matrix representing the solution to an undirected TSP,</span>
<span style="color: #75715e"># extract the tour as a vector</span>
<span style="color: #75715e"># Input:</span>
<span style="color: #75715e">#  n        Number of cities</span>
<span style="color: #75715e">#  sol      n-by-n 0-1 symmetric matrix representing solution</span>
<span style="color: #75715e"># Output:</span>
<span style="color: #75715e">#  tour     n+1 length vector of tour, starting and ending at 1</span>
<span style="color: #66d9ef">function</span><span style="color: #a6e22e"> extractTour</span><span style="color: #f8f8f2">(n,</span> <span style="color: #f8f8f2">sol)</span>
    <span style="color: #f8f8f2">tour</span> <span style="color: #f92672">=</span> <span style="color: #f8f8f2">[</span><span style="color: #ae81ff">1</span><span style="color: #f8f8f2">]</span>  <span style="color: #75715e"># Start at city 1 always</span>
    <span style="color: #f8f8f2">cur_city</span> <span style="color: #f92672">=</span> <span style="color: #ae81ff">1</span>

    <span style="color: #66d9ef">while</span> <span style="color: #f8f8f2">true</span>
        <span style="color: #75715e"># Look for first arc out of current city</span>
        <span style="color: #66d9ef">for</span> <span style="color: #f8f8f2">j</span> <span style="color: #f92672">=</span> <span style="color: #ae81ff">1</span><span style="color: #f8f8f2">:n</span>
            <span style="color: #66d9ef">if</span> <span style="color: #f8f8f2">sol[cur_city,j]</span> <span style="color: #f92672">&gt;=</span> <span style="color: #ae81ff">1</span><span style="color: #f92672">-</span><span style="color: #ae81ff">1e-6</span>
                <span style="color: #75715e"># Found next city</span>
                <span style="color: #f8f8f2">push</span><span style="color: #f92672">!</span><span style="color: #f8f8f2">(tour,</span> <span style="color: #f8f8f2">j)</span>
                <span style="color: #75715e"># Don&#39;t ever use this arc again</span>
                <span style="color: #f8f8f2">sol[cur_city,</span> <span style="color: #f8f8f2">j]</span> <span style="color: #f92672">=</span> <span style="color: #ae81ff">0.0</span>
                <span style="color: #75715e"># sol[j, cur_city] = 0.0</span>
                <span style="color: #75715e"># Move to next city</span>
                <span style="color: #f8f8f2">cur_city</span> <span style="color: #f92672">=</span> <span style="color: #f8f8f2">j</span>
                <span style="color: #66d9ef">break</span>
            <span style="color: #66d9ef">end</span>
        <span style="color: #66d9ef">end</span>
        <span style="color: #75715e"># If we have come back to 1, stop</span>
        <span style="color: #66d9ef">if</span> <span style="color: #f8f8f2">cur_city</span> <span style="color: #f92672">==</span> <span style="color: #ae81ff">1</span>
            <span style="color: #66d9ef">break</span>
        <span style="color: #66d9ef">end</span>
    <span style="color: #66d9ef">end</span>  <span style="color: #75715e"># end while</span>
    <span style="color: #66d9ef">return</span> <span style="color: #f8f8f2">tour</span>
<span style="color: #66d9ef">end</span>

<span style="color: #75715e"># findSubtour</span>
<span style="color: #75715e"># Given a n-by-n matrix representing solution to the relaxed</span>
<span style="color: #75715e"># undirected TSP problem, find a set of nodes belonging to a subtour</span>
<span style="color: #75715e"># Input:</span>
<span style="color: #75715e">#  n        Number of cities</span>
<span style="color: #75715e">#  sol      n-by-n 0-1 symmetric matrix representing solution</span>
<span style="color: #75715e"># Outputs:</span>
<span style="color: #75715e">#  subtour  n length vector of booleans, true iff in a particular subtour</span>
<span style="color: #75715e">#  subtour_length   Number of cities in subtour (if n, no subtour found)</span>
<span style="color: #66d9ef">function</span><span style="color: #a6e22e"> findSubtour</span><span style="color: #f8f8f2">(n,</span> <span style="color: #f8f8f2">sol)</span>
    <span style="color: #75715e"># Initialize to no subtour</span>
    <span style="color: #f8f8f2">subtour</span> <span style="color: #f92672">=</span> <span style="color: #f8f8f2">fill(false,n)</span>
    <span style="color: #75715e"># Always start looking at city 1</span>
    <span style="color: #f8f8f2">cur_city</span> <span style="color: #f92672">=</span> <span style="color: #ae81ff">1</span>
    <span style="color: #f8f8f2">subtour[cur_city]</span> <span style="color: #f92672">=</span> <span style="color: #f8f8f2">true</span>
    <span style="color: #f8f8f2">subtour_length</span> <span style="color: #f92672">=</span> <span style="color: #ae81ff">1</span>
    <span style="color: #66d9ef">while</span> <span style="color: #f8f8f2">true</span>
        <span style="color: #75715e"># Find next node that we haven&#39;t yet visited</span>
        <span style="color: #f8f8f2">found_city</span> <span style="color: #f92672">=</span> <span style="color: #f8f8f2">false</span>
        <span style="color: #66d9ef">for</span> <span style="color: #f8f8f2">j</span> <span style="color: #66d9ef">in</span> <span style="color: #ae81ff">1</span><span style="color: #f8f8f2">:n</span>
            <span style="color: #66d9ef">if</span> <span style="color: #f92672">!</span><span style="color: #f8f8f2">subtour[j]</span>
                <span style="color: #66d9ef">if</span> <span style="color: #f8f8f2">sol[cur_city,</span> <span style="color: #f8f8f2">j]</span> <span style="color: #f92672">&gt;=</span> <span style="color: #ae81ff">1</span><span style="color: #f92672">-</span><span style="color: #ae81ff">1e-6</span>
                    <span style="color: #75715e"># Arc to unvisited city, follow it</span>
                    <span style="color: #f8f8f2">cur_city</span> <span style="color: #f92672">=</span> <span style="color: #f8f8f2">j</span>
                    <span style="color: #f8f8f2">subtour[j]</span> <span style="color: #f92672">=</span> <span style="color: #f8f8f2">true</span>
                    <span style="color: #f8f8f2">found_city</span> <span style="color: #f92672">=</span> <span style="color: #f8f8f2">true</span>
                    <span style="color: #f8f8f2">subtour_length</span> <span style="color: #f92672">+=</span> <span style="color: #ae81ff">1</span>
                    <span style="color: #66d9ef">break</span>  <span style="color: #75715e"># Move on to next city</span>
                <span style="color: #66d9ef">end</span>
            <span style="color: #66d9ef">end</span>
        <span style="color: #66d9ef">end</span>
        <span style="color: #66d9ef">if</span> <span style="color: #f92672">!</span><span style="color: #f8f8f2">found_city</span>
            <span style="color: #75715e"># We are done</span>
            <span style="color: #66d9ef">break</span>
        <span style="color: #66d9ef">end</span>
    <span style="color: #66d9ef">end</span>
    <span style="color: #66d9ef">return</span> <span style="color: #f8f8f2">subtour,</span> <span style="color: #f8f8f2">subtour_length</span>
<span style="color: #66d9ef">end</span>

<span style="color: #75715e"># buildTSP</span>
<span style="color: #75715e"># Given a matrix of city locations, build the TSP</span>
<span style="color: #75715e"># Inputs:</span>
<span style="color: #75715e">#   n       Number of cities</span>
<span style="color: #75715e">#   cities  n-by-n matrix of distancers between cities</span>
<span style="color: #75715e"># Output:</span>
<span style="color: #75715e">#   m       JuMP model</span>
<span style="color: #66d9ef">function</span><span style="color: #a6e22e"> buildTSP</span><span style="color: #f8f8f2">(n,</span> <span style="color: #f8f8f2">dist)</span>
    <span style="color: #75715e"># Create a model that will use GLPK to solve</span>
    <span style="color: #f8f8f2">m</span> <span style="color: #f92672">=</span> <span style="color: #f8f8f2">Model(solver</span><span style="color: #f92672">=</span><span style="color: #f8f8f2">GLPKSolverMIP())</span>
    <span style="color: #75715e"># m = Model(solver=CplexSolver())</span>

    <span style="color: #75715e"># x[i,j] is 1 iff we travel from i to j, 0 otherwise</span>
    <span style="color: #f8f8f2">@defVar(m,</span> <span style="color: #f8f8f2">x[</span><span style="color: #ae81ff">1</span><span style="color: #f8f8f2">:n,</span><span style="color: #ae81ff">1</span><span style="color: #f8f8f2">:n],</span> <span style="color: #f8f8f2">Bin)</span>

    <span style="color: #75715e"># Minimize length of tour</span>
    <span style="color: #f8f8f2">@setObjective(m,</span> <span style="color: #f8f8f2">Min,</span> <span style="color: #f8f8f2">sum{dist[i,j]</span><span style="color: #f92672">*</span><span style="color: #f8f8f2">x[i,j],</span> <span style="color: #f8f8f2">i</span><span style="color: #f92672">=</span><span style="color: #ae81ff">1</span><span style="color: #f8f8f2">:n,j</span><span style="color: #f92672">=</span><span style="color: #ae81ff">1</span><span style="color: #f8f8f2">:n})</span>

    <span style="color: #75715e"># Don&#39;t allow self-arcs</span>
    <span style="color: #66d9ef">for</span> <span style="color: #f8f8f2">i</span> <span style="color: #f92672">=</span> <span style="color: #ae81ff">1</span><span style="color: #f8f8f2">:n</span>
        <span style="color: #f8f8f2">@addConstraint(m,</span> <span style="color: #f8f8f2">x[i,i]</span> <span style="color: #f92672">==</span> <span style="color: #ae81ff">0</span><span style="color: #f8f8f2">)</span>
    <span style="color: #66d9ef">end</span>

    <span style="color: #75715e"># We must enter and leave every city once and only once</span>
    <span style="color: #66d9ef">for</span> <span style="color: #f8f8f2">i</span> <span style="color: #f92672">=</span> <span style="color: #ae81ff">1</span><span style="color: #f8f8f2">:n</span>
        <span style="color: #f8f8f2">@addConstraint(m,</span> <span style="color: #f8f8f2">sum{x[i,j],</span> <span style="color: #f8f8f2">j</span><span style="color: #f92672">=</span><span style="color: #ae81ff">1</span><span style="color: #f8f8f2">:n}</span> <span style="color: #f92672">==</span> <span style="color: #ae81ff">1</span><span style="color: #f8f8f2">)</span>
        <span style="color: #f8f8f2">@addConstraint(m,</span> <span style="color: #f8f8f2">sum{x[j,i],</span> <span style="color: #f8f8f2">j</span><span style="color: #f92672">=</span><span style="color: #ae81ff">1</span><span style="color: #f8f8f2">:n}</span> <span style="color: #f92672">==</span> <span style="color: #ae81ff">1</span><span style="color: #f8f8f2">)</span>
    <span style="color: #66d9ef">end</span>

    <span style="color: #66d9ef">function</span><span style="color: #a6e22e"> subtour</span><span style="color: #f8f8f2">(cb)</span>
        <span style="color: #75715e"># Check for integer solution, if not, return before adding constraint</span>
        <span style="color: #f8f8f2">integer_solution</span> <span style="color: #f92672">=</span> <span style="color: #f8f8f2">check_integrality(n,</span> <span style="color: #f8f8f2">getValue(x))</span>
        <span style="color: #66d9ef">if</span> <span style="color: #f92672">!</span><span style="color: #f8f8f2">integer_solution</span>
            <span style="color: #66d9ef">return</span>
        <span style="color: #66d9ef">end</span>

        <span style="color: #75715e"># Find any set of cities in a subtour</span>
        <span style="color: #f8f8f2">subtour,</span> <span style="color: #f8f8f2">subtour_length</span> <span style="color: #f92672">=</span> <span style="color: #f8f8f2">findSubtour(n,</span> <span style="color: #f8f8f2">getValue(x))</span>
        <span style="color: #66d9ef">if</span> <span style="color: #f8f8f2">subtour_length</span> <span style="color: #f92672">==</span> <span style="color: #f8f8f2">n</span>
            <span style="color: #75715e"># This &quot;subtour&quot; is actually all cities, so we are done</span>
            <span style="color: #66d9ef">return</span>
        <span style="color: #66d9ef">end</span>

        <span style="color: #75715e"># Subtour found - add lazy constraint</span>
        <span style="color: #75715e"># We will build it up piece-by-piece</span>
        <span style="color: #f8f8f2">arcs_from_subtour</span> <span style="color: #f92672">=</span> <span style="color: #f8f8f2">AffExpr()</span>

        <span style="color: #66d9ef">for</span> <span style="color: #f8f8f2">i</span> <span style="color: #f92672">=</span> <span style="color: #ae81ff">1</span><span style="color: #f8f8f2">:n</span>
            <span style="color: #66d9ef">if</span> <span style="color: #f92672">!</span><span style="color: #f8f8f2">subtour[i]</span>
                <span style="color: #75715e"># If this city isn&#39;t in subtour, skip it</span>
                <span style="color: #66d9ef">continue</span>
            <span style="color: #66d9ef">end</span>
            <span style="color: #75715e"># Want to include all arcs from this city, which is in</span>
            <span style="color: #75715e"># the subtour, to all cities not in the subtour</span>
            <span style="color: #66d9ef">for</span> <span style="color: #f8f8f2">j</span> <span style="color: #f92672">=</span> <span style="color: #ae81ff">1</span><span style="color: #f8f8f2">:n</span>
                <span style="color: #66d9ef">if</span> <span style="color: #f8f8f2">i</span> <span style="color: #f92672">==</span> <span style="color: #f8f8f2">j</span>
                    <span style="color: #75715e"># Self-arc</span>
                    <span style="color: #66d9ef">continue</span>
                <span style="color: #66d9ef">elseif</span> <span style="color: #f8f8f2">subtour[j]</span>
                    <span style="color: #75715e"># Both ends in same subtour</span>
                    <span style="color: #66d9ef">continue</span>
                <span style="color: #66d9ef">else</span>
                    <span style="color: #75715e"># j isn&#39;t in subtour</span>
                    <span style="color: #f8f8f2">arcs_from_subtour</span> <span style="color: #f92672">+=</span> <span style="color: #f8f8f2">x[i,j]</span>
                <span style="color: #66d9ef">end</span>
            <span style="color: #66d9ef">end</span>
        <span style="color: #66d9ef">end</span>

        <span style="color: #75715e"># Add the new subtour elimination constraint we built</span>
        <span style="color: #f8f8f2">addLazyConstraint(cb,</span> <span style="color: #f8f8f2">arcs_from_subtour</span> <span style="color: #f92672">&gt;=</span> <span style="color: #ae81ff">1</span><span style="color: #f8f8f2">)</span>
    <span style="color: #66d9ef">end</span>  <span style="color: #75715e"># End function subtour</span>

    <span style="color: #75715e"># Solve the problem with our cut generator</span>
    <span style="color: #f8f8f2">setLazyCallback(m,</span> <span style="color: #f8f8f2">subtour)</span>
    <span style="color: #66d9ef">return</span> <span style="color: #f8f8f2">m</span>
<span style="color: #66d9ef">end</span> <span style="color: #75715e"># end buildTSP</span>

<span style="color: #75715e"># Solve the TSP</span>
<span style="color: #75715e"># Input:</span>
<span style="color: #75715e">#   m: JuMP model</span>
<span style="color: #75715e"># Output:</span>
<span style="color: #75715e">#   tour Vector with order to cities are visited in</span>
<span style="color: #66d9ef">function</span><span style="color: #a6e22e"> solveTSP</span><span style="color: #f8f8f2">(m)</span>
    <span style="color: #f8f8f2">status</span> <span style="color: #f92672">=</span> <span style="color: #f8f8f2">solve(m)</span>
    <span style="color: #75715e"># println(&quot;Objective value: $(getObjectiveValue(m)), status: $status&quot;)</span>
    <span style="color: #f8f8f2">n</span> <span style="color: #f92672">=</span> <span style="color: #f8f8f2">int(sqrt(m</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">numCols))</span>
    <span style="color: #f8f8f2">tour</span> <span style="color: #f92672">=</span> <span style="color: #f8f8f2">extractTour(n,</span> <span style="color: #f8f8f2">getValue(m</span><span style="color: #f92672">.</span><span style="color: #f8f8f2">dictList[</span><span style="color: #ae81ff">1</span><span style="color: #f8f8f2">]))</span>
    <span style="color: #66d9ef">return</span> <span style="color: #f8f8f2">tour</span>
<span style="color: #66d9ef">end</span>  <span style="color: #75715e"># end solveTSP</span>

<span style="color: #75715e"># Determines if the current solution is within 1e-6 of integrality</span>
<span style="color: #66d9ef">function</span><span style="color: #a6e22e"> check_integrality</span><span style="color: #f8f8f2">(n,</span> <span style="color: #f8f8f2">sol)</span>
    <span style="color: #66d9ef">for</span> <span style="color: #f8f8f2">i</span> <span style="color: #66d9ef">in</span> <span style="color: #ae81ff">1</span><span style="color: #f8f8f2">:n</span>
        <span style="color: #66d9ef">for</span> <span style="color: #f8f8f2">j</span> <span style="color: #66d9ef">in</span> <span style="color: #ae81ff">1</span><span style="color: #f8f8f2">:n</span>
            <span style="color: #66d9ef">if</span> <span style="color: #f8f8f2">abs(sol[i,j]</span> <span style="color: #f92672">-</span> <span style="color: #f8f8f2">int(sol[i,j]))</span> <span style="color: #f92672">&gt;</span> <span style="color: #ae81ff">1e-6</span>
                <span style="color: #66d9ef">return</span> <span style="color: #f8f8f2">false</span>
            <span style="color: #66d9ef">end</span>
        <span style="color: #66d9ef">end</span>
    <span style="color: #66d9ef">end</span>
    <span style="color: #66d9ef">return</span> <span style="color: #f8f8f2">true</span>
<span style="color: #66d9ef">end</span>

<span style="color: #66d9ef">end</span>
</pre></td></tr></table></div>
